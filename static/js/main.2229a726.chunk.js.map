{"version":3,"sources":["todoData.js","components/TodoItem.js","components/TodoList.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["todoData","push","id","title","done","TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteHandel","bind","assertThisInitialized","doneHandel","parseInt","removeItem","maskItemDone","react_default","a","createElement","className","item","md","onClick","type","Component","TodoList","items","map","index","components_TodoItem","key","TodoForm","onSubmit","event","preventDefault","itemValue","refs","value","addItem","form","reset","ref","placeholder","App","state","todoItems","unshift","length","setState","splice","todo","TodoList_TodoList","initItems","components_TodoForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2229a726.chunk.js","sourcesContent":["let todoData = [];\ntodoData.push({id: 1, title: \"eat\", done: false});\ntodoData.push({id: 2, title: \"sleep\", done: true});\ntodoData.push({id: 3, title: \"code\", done: true});\nexport default todoData\n","import React, {Component} from 'react'\nimport { MdCheckBox, MdCheckBoxOutlineBlank } from 'react-icons/lib/md'\n\nclass TodoItem extends Component {\n  constructor(props) {\n    super(props)\n    this.deleteHandel = this.deleteHandel.bind(this);\n    this.doneHandel = this.doneHandel.bind(this);\n  }\n\n  deleteHandel() {\n    var id = parseInt(this.props.id);\n    this.props.removeItem(id);\n  }\n\n  doneHandel() {\n    var id = parseInt(this.props.id);\n    this.props.maskItemDone(id);\n  }\n\n  render() {\n    return (\n      <li className=\"list-group-item\">\n        {this.props.item.done ? (\n          <MdCheckBox onClick={this.doneHandel} /> \n        ) : (\n          <MdCheckBoxOutlineBlank onClick={this.doneHandel} />\n        )}\n        \n        {this.props.item.title}\n        <button type=\"button\" onClick={this.deleteHandel} className=\"badge btn btn-danger\">Delete</button>\n      </li>\n    )\n  }\n}\n\nexport default TodoItem\n\n\n","import React, {Component} from 'react'\nimport TodoItem from './TodoItem'\n\nexport default class TodoList extends Component {\n  render () {\n    var items = this.props.items.map((item, index) => {\n      return (\n        <TodoItem key={index} item={item} id={index} removeItem={this.props.removeItem} maskItemDone={this.props.maskItemDone} />\n      );\n    });\n    return (\n      <ul className=\"list-group\"> \n        <li className=\"list-group-item active\">My Todo</li>\n        {items} \n      </ul>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nclass TodoForm extends Component {\n  constructor(props) {\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  onSubmit(event) {\n    event.preventDefault()\n    var itemValue = this.refs.item.value\n    if(itemValue) {\n      this.props.addItem(itemValue)\n      this.refs.form.reset()\n    }\n  }\n\n  render() {\n    return (\n      <form ref=\"form\" onSubmit={this.onSubmit} className=\"form-inline\">\n        <input ref=\"item\" type=\"text\" className=\"form-control\"  placeholder=\"Enter new todo\" />\n        <button type=\"submit\" className=\"btn btn-primary\">Add</button>\n      </form>\n    )\n  }\n}\n\nexport default TodoForm\n\n","import React, { Component } from 'react'\nimport TodoList from './components/TodoList'\nimport TodoForm from './components/TodoForm'\nimport todoItems from './todoData'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.addItem = this.addItem.bind(this)\n    this.removeItem = this.removeItem.bind(this)\n    this.maskItemDone = this.maskItemDone.bind(this)\n    this.state = { todoItems: todoItems}\n  }\n\n  addItem(itemValue) {\n    todoItems.unshift({\n      id: todoItems.length+1, \n      title: itemValue, \n      done: false\n    });\n    this.setState({todoItems: todoItems})\n  }\n\n  removeItem(id) {\n    todoItems.splice(id, 1)\n    this.setState({todoItems: todoItems})\n  }\n\n  maskItemDone(id) {\n    var todo = todoItems[id]\n    todoItems.splice(id,1)\n    todo.done = !todo.done\n    todo.done ? todoItems.push(todo) : todoItems.unshift(todo)\n    this.setState({todoItems: todoItems})\n  }\n\n  render() {\n    return (\n      <div className=\"row justify-content-center align-items-center\">\n        <div className=\"col-sm-12 col-md-6\">\n          <TodoList items={this.props.initItems} removeItem={this.removeItem} maskItemDone={this.maskItemDone}/>\n          <p></p>\n          <TodoForm addItem={this.addItem} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport todoData from './todoData'\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App initItems={todoData} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}